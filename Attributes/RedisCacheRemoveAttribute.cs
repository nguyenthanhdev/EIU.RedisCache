using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using EIU.Caching.Redis.Core;

namespace EIU.Caching.Redis.Attributes
{
    /// <summary>
    /// Attribute d√πng ƒë·ªÉ x√≥a cache Redis khi d·ªØ li·ªáu thay ƒë·ªïi (POST / PUT / DELETE).
    ///
    /// H·ªó tr·ª£ 3 ch·∫ø ƒë·ªô:
    /// 1Ô∏è‚É£ C√≥ truy·ªÅn key c·ª• th·ªÉ ‚Üí x√≥a ch√≠nh x√°c key ho·∫∑c prefix.
    ///     [RedisCacheRemove("Student:Detail:{id}", "Student:GetList")]
    ///
    /// 2Ô∏è‚É£ Kh√¥ng truy·ªÅn g√¨ nh∆∞ng Action c√≥ param id ho·∫∑c ...Id ‚Üí
    ///     T·ª± ƒë·ªông x√≥a cache detail + list t∆∞∆°ng ·ª©ng.
    ///     [RedisCacheRemove] v·ªõi Delete(int id)
    ///     ‚Üí X√≥a Project:Controller:Detail:{id} v√† Project:Controller:GetList
    ///
    /// 3Ô∏è‚É£ Kh√¥ng c√≥ id ‚Üí x√≥a to√†n b·ªô cache c·ªßa controller.
    ///     [RedisCacheRemove] v·ªõi ImportAll()
    ///     ‚Üí X√≥a Project:Controller:*
    /// </summary>
    [AttributeUsage(AttributeTargets.Method)]
    public class RedisCacheRemoveAttribute : Attribute, IAsyncActionFilter
    {
        /// <summary>
        /// Danh s√°ch key ho·∫∑c prefix ch·ªâ ƒë·ªãnh ƒë·ªÉ x√≥a th·ªß c√¥ng.
        /// </summary>
        public string[] KeysOrPrefixes { get; }

        public RedisCacheRemoveAttribute(params string[] keysOrPrefixes)
        {
            KeysOrPrefixes = keysOrPrefixes ?? Array.Empty<string>();
        }

        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            // ‚úÖ Ch·∫°y action tr∆∞·ªõc, ch·ªâ x√≥a cache khi action th√†nh c√¥ng
            var result = await next();

            if (result.Exception != null)
                return; // ‚ùå N·∫øu c√≥ l·ªói ‚Üí kh√¥ng x√≥a cache

            var sp = context.HttpContext.RequestServices;
            var cacheService = sp.GetRequiredService<IRedisCacheService>();
            var options = sp.GetRequiredService<IOptions<RedisCacheOptions>>().Value;

            // ‚öôÔ∏è N·∫øu Redis b·ªã t·∫Øt trong c·∫•u h√¨nh ‚Üí b·ªè qua
            if (!options.Enabled)
                return;

            var project = options.ProjectAlias ?? "default";
            var controller = context.Controller.GetType().Name.Replace("Controller", "");

            // ------------------------------------------------------------------------------------
            // üß© CASE 1: C√≥ key ho·∫∑c prefix ch·ªâ ƒë·ªãnh ‚Üí x√≥a ch√≠nh x√°c theo danh s√°ch
            // ------------------------------------------------------------------------------------
            if (KeysOrPrefixes.Length > 0)
            {
                await RemoveExplicitKeysAsync(KeysOrPrefixes, project, context, cacheService);
                return;
            }

            // ------------------------------------------------------------------------------------
            // üß© CASE 2: Kh√¥ng ch·ªâ ƒë·ªãnh key ‚Üí t·ª± ph√°t hi·ªán id ho·∫∑c ...Id trong tham s·ªë
            // ------------------------------------------------------------------------------------
            var idParam = context.ActionArguments.FirstOrDefault(p =>
                p.Key.Equals("id", StringComparison.OrdinalIgnoreCase) ||
                p.Key.EndsWith("Id", StringComparison.OrdinalIgnoreCase)
            );

            if (idParam.Value != null)
            {
                // C√≥ id ‚Üí x√≥a chi ti·∫øt v√† danh s√°ch li√™n quan
                var idValue = idParam.Value.ToString();
                var detailKey = $"{project}:{controller}:detail:{idValue}".ToLowerInvariant();
                var listKey = $"{project}:{controller}:getlist".ToLowerInvariant();

                await cacheService.RemoveAsync(detailKey);
                await cacheService.RemoveAsync(listKey);
            }
            else
            {
                // --------------------------------------------------------------------------------
                // üßπ CASE 3: Kh√¥ng c√≥ id ‚Üí x√≥a to√†n b·ªô cache controller
                // --------------------------------------------------------------------------------
                var prefix = $"{project}:{controller}:".ToLowerInvariant();
                await cacheService.RemoveByPrefixAsync(prefix);
            }
        }

        /// <summary>
        /// X·ª≠ l√Ω x√≥a cache khi truy·ªÅn key c·ª• th·ªÉ (c√≥ th·ªÉ ch·ª©a {id} ho·∫∑c prefix)
        /// </summary>
        private async Task RemoveExplicitKeysAsync(
            string[] keys,
            string project,
            ActionExecutingContext context,
            IRedisCacheService cacheService)
        {
            foreach (var rawKey in keys)
            {
                // Thay placeholder {id} ho·∫∑c {userId} trong key template
                var key = ReplaceRouteValues(rawKey, context);
                var fullKey = $"{project}:{key}".ToLowerInvariant();

                if (fullKey.EndsWith(":"))
                {
                    // X√≥a prefix
                    await cacheService.RemoveByPrefixAsync(fullKey);
                }
                else
                {
                    // X√≥a key c·ª• th·ªÉ
                    await cacheService.RemoveAsync(fullKey);
                }
            }
        }

        /// <summary>
        /// Thay {id}, {userId}, ... b·∫±ng gi√° tr·ªã th·ª±c t·∫ø trong route ho·∫∑c param.
        /// </summary>
        private string ReplaceRouteValues(string key, ActionExecutingContext context)
        {
            if (string.IsNullOrWhiteSpace(key))
                return key;

            foreach (var arg in context.ActionArguments)
            {
                if (arg.Value == null) continue;

                key = key.Replace(
                    $"{{{arg.Key}}}",
                    arg.Value.ToString(),
                    StringComparison.OrdinalIgnoreCase
                );
            }

            return key;
        }
    }
}
