using EIU.Infrastructure.Redis.Core;
using EIU.Infrastructure.Redis.Interceptors;
using EIU.Infrastructure.Redis.Manager;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using StackExchange.Redis;

namespace EIU.Infrastructure.Redis.Extensions
{
  /// <summary>
  /// Ti·ªán √≠ch m·ªü r·ªông gi√∫p c·∫•u h√¨nh v√† ƒëƒÉng k√Ω Redis Cache v√†o Dependency Injection container.
  /// H·ªó tr·ª£ ƒë·ªçc c·∫•u h√¨nh t·ª´ appsettings.json (section m·∫∑c ƒë·ªãnh: "RedisCache").
  /// </summary>
  public static class RedisServiceCollectionExtensions
  {
    /// <summary>
    /// üß© ƒêƒÉng k√Ω to√†n b·ªô Redis caching components:
    /// - RedisCacheOptions (t·ª´ appsettings)
    /// - RedisCacheService, RedisCacheManager, RedisCacheInterceptor
    /// </summary>
    /// <param name="services">IServiceCollection trong Startup ho·∫∑c Program.cs</param>
    /// <param name="configuration">C·∫•u h√¨nh appsettings.json ho·∫∑c m√¥i tr∆∞·ªùng</param>
    /// <returns>IServiceCollection ƒë·ªÉ chain ti·∫øp c·∫•u h√¨nh</returns>
    public static IServiceCollection AddRedisCaching(
                this IServiceCollection services,
                IConfigurationSection redisSection)
    {
            //  ƒê·ªçc c·∫•u h√¨nh Redis
            var redisConfig = redisSection.Get<RedisCacheOptions>() ?? new RedisCacheOptions();

            //  Ki·ªÉm tra h·ª£p l·ªá c·∫•u h√¨nh
            if (!redisConfig.Enabled)
            {
              Console.WriteLine("‚ö†Ô∏è RedisCacheConfig.Enabled = false ‚Üí B·ªô nh·ªõ ƒë·ªám Redis s·∫Ω kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t.");
              return services;
            }

            if (string.IsNullOrWhiteSpace(redisConfig.ConnectionString))
            {
              throw new InvalidOperationException("‚ùå C·∫•u h√¨nh RedisCacheConfig.ConnectionString b·ªã thi·∫øu ho·∫∑c r·ªóng. Vui l√≤ng ki·ªÉm tra l·∫°i file appsettings.json!");
            }

            //  ƒêƒÉng k√Ω Redis c·∫•u h√¨nh v√†o DI
            services.AddSingleton<IOptions<RedisCacheOptions>>(_ => Options.Create(redisConfig));
            services.AddSingleton(redisConfig);

            // üß© Kh·ªüi t·∫°o k·∫øt n·ªëi Redis ngay l·∫≠p t·ª©c
            IConnectionMultiplexer? redisConnection = null;
            try
            {
                Console.WriteLine($"üîå K·∫øt n·ªëi Redis: {redisConfig.ConnectionString}");
                redisConnection = ConnectionMultiplexer.Connect(redisConfig.ConnectionString);
                Console.WriteLine("‚úÖ K·∫øt n·ªëi Redis th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine($"‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi Redis: {ex.Message}");
                Console.ResetColor();
            }

            // üîó N·∫øu k·∫øt n·ªëi ƒë∆∞·ª£c th√¨ ƒëƒÉng k√Ω b√¨nh th∆∞·ªùng
            if (redisConnection != null && redisConnection.IsConnected)
            {
                services.AddSingleton<IConnectionMultiplexer>(redisConnection);
                services.AddSingleton<IRedisCacheService, RedisCacheService>();
                services.AddSingleton<IRedisCacheManager, RedisCacheManager>();
                services.AddSingleton<RedisCacheInterceptor>();
                Console.WriteLine("üöÄ Redis caching ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!");
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("‚ö†Ô∏è Redis kh√¥ng kh·∫£ d·ª•ng ‚Üí RedisCacheService s·∫Ω kh√¥ng ƒë∆∞·ª£c ƒëƒÉng k√Ω.");
                Console.ResetColor();
            }
            return services;
        }
      }
}
